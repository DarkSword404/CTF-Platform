version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: ctf-postgres
    environment:
      POSTGRES_DB: ctf_platform
      POSTGRES_USER: ctf_user
      POSTGRES_PASSWORD: ctf_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ctf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ctf_user -d ctf_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB数据库
  mongodb:
    image: mongo:7-jammy
    container_name: ctf-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ctf_admin
      MONGO_INITDB_ROOT_PASSWORD: ctf_mongo_password
      MONGO_INITDB_DATABASE: ctf_challenges
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - ctf-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ctf-redis
    command: redis-server --appendonly yes --requirepass ctf_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ctf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ctf-backend
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://ctf_user:ctf_password@postgres:5432/ctf_platform
      MONGODB_URI: mongodb://ctf_admin:ctf_mongo_password@mongodb:27017/ctf_challenges?authSource=admin
      REDIS_URL: redis://:ctf_redis_password@redis:6379/0
      
      # Flask配置
      FLASK_ENV: production
      SECRET_KEY: your-super-secret-key-change-in-production
      JWT_SECRET_KEY: your-jwt-secret-key-change-in-production
      
      # AI模型配置（根据需要设置）
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_API_BASE: ${OPENAI_API_BASE:-https://api.openai.com/v1}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      DEEPSEEK_API_BASE: ${DEEPSEEK_API_BASE:-https://api.deepseek.com/v1}
      ERNIE_BOT_AK: ${ERNIE_BOT_AK:-}
      ERNIE_BOT_SK: ${ERNIE_BOT_SK:-}
      TONGYI_QIANWEN_API_KEY: ${TONGYI_QIANWEN_API_KEY:-}
      ZHIPU_AI_API_KEY: ${ZHIPU_AI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      OLLAMA_API_BASE: ${OLLAMA_API_BASE:-http://ollama:11434}
      
      # Docker配置
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - challenge_files:/app/challenges
      - logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - ctf-network
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ctf-frontend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ctf-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama本地AI模型服务（可选）
  ollama:
    image: ollama/ollama:latest
    container_name: ctf-ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - ctf-network
    restart: unless-stopped
    environment:
      - OLLAMA_ORIGINS=*
    profiles:
      - ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: ctf-nginx
    volumes:
      - ./nginx-prod.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ctf-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  challenge_files:
    driver: local
  logs:
    driver: local

networks:
  ctf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


